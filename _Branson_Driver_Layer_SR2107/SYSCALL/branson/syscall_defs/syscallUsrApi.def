##############################################################################
# syscallUsrApi.def.template - Template for user-defined system call API's
#
# Copyright 2004, 2011 Wind River Systems, Inc.
#
# modification history
# --------------------
# 01b,31jan11,pad  Updated header.
# 01a,24mar04,yvp  Written.
#
#			   -- IMPORTANT --
#  TO START USING THIS FILE, PLEASE RENAME IT TO syscallUsrApi.def FIRST.
#
#  DESCRIPTION:
#  This file defines system call function API for user-defined VxWorks system
#  calls. It complements syscallApi.def in that it allows VxWorks users to 
#  experiment with their own custom system calls.
#
#  FORMAT:
# 
#  The format is identical to that used by syscallApi.def.
#
#  A system call function API definition line has the format:
#
#  <name> <#args> [ <argument list> ] [ <return size> ] [ <configMacro(s)> ]
#
#  The name is the name of the system call. It must be the same as the name
#  mentioned in syscallNum.def.
#
#  <#args> is the number of arguments taken by the system call. For functions
#  taking 64-bit arguments on a 32-bit system, <#args> must be increased so
#  that <#args> reflects the total number of native-words occupied by the
#  entire argument list. <#args> must not exceed 8.
#
#  <argument list> optionally defines the parameter list for this system call
#  for the purpose of generating the nameScArgs structure. The argument list is
#  enclosed in []'s, and individual arguments are separated by semicolons.
#
#  <return size> is an optional parameter that specifies the size of the
#  return value.  Valid entries are int, long and ptr.  If omitted, a 32-bit
#  return value is assumed.  This parameter is enclosed in []'s.
#
#  <configMacro(s)> is an optional list of macros, at least one of which must
#  be defined, in order for this system call to be included into the system.
#  configMacro's are used as a means to configure specific system calls in
#  or out of a given system build. 
#
#  For example, the _read() system call number has the signature:
#
#       ssize_t _read (int fd, void * buf, size_t maxBytes)
#
#  This must be specified in this file in the following format:
#
#  _read 3 [ int fd; void * buf; size_t maxBytes; ] [ long ] WIND_IO
#
#  Given the definition above, the read system call will be included into
#  the system only if WIND_IO is #defined in the configuration.
#  
########################################################################

INCLUDE <customSystemCallHdlr.h>

AuxClkConnect			1	[ INT32 task_id; ] [ INT32 ]
AuxClkEnable			0   [ ] [ void ]
AuxClkDisable           0   [ ] [ void ]
AuxClkRateGet           0   [ ] [ INT32 ]
AuxClkRateSet			1   [ INT32 ticksPerSecond; ] [ INT32 ]
GpioAlloc				1	[ UINT32 id; ] [ INT32 ] 
GpioGetValue			1	[ UINT32 id; ] [ UINT32 ]
GpioSetValue			2	[ UINT32 id; UINT32 value; ] [ INT32 ]
GpioSetDir  			2	[ UINT32 id; UINT32 value; ] [ INT32 ]
SetRTC	 				1	[ RTCtimerStr time; ] [ STATUS ]
GetRTC  				1   [ RTCtimerStr * pTime; ] [ STATUS ]
# EhrPwmRegisterISR		5	[ EHRPWMDRV_IRQ_HANDLER irqHandler; void * ehrpwmHandlerArgs; UINT8 ehrpwm_inst; INT32 period; INT32 mode; ] [ INT32 ]
# EhrPwmSetAQSFRC			2	[ UINT32 value; UINT8 inst; ] [ INT32 ]
# EhrPwmSetTbClk			2	[ UINT32 tb; UINT8 ehrpwm_inst; ] [ INT32 ]
# EhrPwmSetTbAQConfA		2	[ UINT32 tb; UINT8 ehrpwm_inst; ] [ INT32 ]
# EhrPwmSetTbAQConfB		2	[ UINT32 tb; UINT8 ehrpwm_inst; ] [ INT32 ]
# EhrPwmSetTbPWMCfg		3	[ UINT32 freq; UINT32 dir; UINT8 ehrpwm_inst; ] [ INT32 ]
# EqepSetMaxCount			2	[ INT32 eqep; INT32 count; ] [ INT32 ]
# EqepGetPosCount			1	[ INT32 eqep; ] [ INT32 ]
McSpiTrans    			3   [ SPI_HARDWARE * devInfo; SPI_TRANSFER * pPkg; INT32 channel; ] [ INT32 ]
MsDelay					1	[ INT32 delayTime; ] [ void ]
GpioGetDir  			1	[ UINT32 id; ] [ UINT32 ]
GpioFree				1	[ UINT32 id; ] [ INT32 ]
logERR					8	[ UINT8 *logData; UINT32 lineNo; const UINT8 *fileName; UINT32 logLevel; UINT32 logToFile; _Vx_usr_arg_t arg1; _Vx_usr_arg_t arg2; _Vx_usr_arg_t arg3; ] [ STATUS ]
logWARN				    8	[ UINT8 *logData; UINT32 lineNo; const UINT8 *fileName; UINT32 logLevel; UINT32 logToFile; _Vx_usr_arg_t arg1; _Vx_usr_arg_t arg2; _Vx_usr_arg_t arg3; ] [ STATUS ]
logDBG					8	[ UINT8 *logData; UINT32 lineNo; const UINT8 *fileName; UINT32 logLevel; UINT32 logToFile; _Vx_usr_arg_t arg1; _Vx_usr_arg_t arg2; _Vx_usr_arg_t arg3; ] [ STATUS ]
# Am5728EhrPwmRegisterISR		    5	[ EHRPWMDRV_IRQ_HANDLER irqHandler; void * ehrpwmHandlerArgs; UINT8 ehrpwm_inst; INT32 period; INT32 mode; ] [ INT32 ]
# Am5728EhrPwmSetAQSFRC			2	[ UINT32 value; UINT8 inst; ] [ INT32 ]
# Am5728EhrPwmSetTbClk			2	[ UINT32 tb; UINT8 ehrpwm_inst; ] [ INT32 ]
# Am5728EhrPwmSetTbAQConfA		2	[ UINT32 tb; UINT8 ehrpwm_inst; ] [ INT32 ]
# Am5728EhrPwmSetTbAQConfB		2	[ UINT32 tb; UINT8 ehrpwm_inst; ] [ INT32 ]
# Am5728EhrPwmSetTbPWMCfg		    3	[ UINT32 freq; UINT32 dir; UINT8 ehrpwm_inst; ] [ INT32 ]
RunTimeFeature			0	[ ]	[ INT32 ]
IPConfiguration			4	[ char *ipAddr; char *subnetAddr; char *gatewayAddr; char *InterfaceName; ] [ STATUS ]
QSPIFlashErase          2   [ unsigned int offset; unsigned int length; ]
QSPIFlashWrite          3   [ unsigned int offset; unsigned int length; unsigned int src; ] [ int ]
QSPIFlashRead           3   [ unsigned int offset; unsigned int length; unsigned int dest; ] [ int ]
# QspiLibBlockErase       1   [ unsigned int block; ]
# QspiLibWrite            3   [ unsigned int dstOffsetAddr; unsigned int srcAddr; unsigned int length; ] [ unsigned int ]
# QspiLibRead             3   [ unsigned int srcOffsetAddr; unsigned int dstAddr; unsigned int length; ] [ unsigned int ]
# QspiLibInit             0   []
# QspiLibPrintId          0   []
# SioPollInput            2   [ SIO_CHAN * pChan; char *pChar; ] [ INT32 ]
# SioPollOutput           2   [ SIO_CHAN * pChan; char outChar; ] [ INT32 ]
GpioIntConnect  		3	[ UINT32 id; VOIDFUNCPTR pIsr; void *ptr; ] [ INT32 ]
GpioIntEnable           3	[ UINT32 id; VOIDFUNCPTR pIsr; void *pArg; ] [ INT32 ]
GpioIntConfig           3   [ UINT32 id; INTR_TRIGGER trig; INTR_POLARITY pol; ] [ INT32 ]
TimeStamp					0   [] [ INT32 ]
Gpio24VLowShutdown	    0	[ ] [ STATUS ]
# PcGpio15VLow			0	[ ] [ STATUS ]
# PcGpio5VLow	    		0	[ ] [ STATUS ]
EmmcExtCsdDecode        1   [ EST_LIFE * emmc_est_life; ] [ STATUS ]
GetRTClowPwr  			1   [ RTCtimerStr * pTime; ] [ INT32 ]
GpioSetDebounce			2   [ UINT32 id; UINT32 value; ] [ INT32 ]
