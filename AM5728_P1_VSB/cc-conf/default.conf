# default.conf - wr-cc conf template file
#
# Copyright (c) 2020-2021 Wind River Systems, Inc.
#
# The right to copy, distribute, modify or otherwise make use
# of this software may be licensed only pursuant to the terms
# of an applicable Wind River license agreement.
#
# modification history
# --------------------
# 16apr21,brk  allow Boost to use "wr-c++" -x c  
# 23feb21,lau  added EXE for PROG_ld and PROG_ld_KERNEL (V7BC-2674)
# 03feb21,l_z  add LD_ARGS_STATIC LD_ARGS_DYNAMIC LD_ARGS_SHARED (V7LIBC-1372)
# 25jan21,lau  added support for LLD (VXWPG-1194)
# 23nov20,l_z  add more config variable check (V7LIBC-1331)
# 16nov20,l_z  add UTILS_UNIX header to dkm build rules (V7LIBC-1326)
# 30oct20,l_z  don't report error when -print-target-triple
#              without source file (V7LIBC-1316)
# 17sep20,l_z  add lkm support
# 17jul20,bpi  Removed -isystem VSB/usr/h, -isystem VSB/usr/h/system, -isystem VSB/krnl/h/system (V7LIBC-1161)
# 14jul20,l_z  added CC_TOOL_FLAGS_IGNORE PROG_as
# 12apr20,l_z  created from rules.conf.mk
#
# DESCRIPTION
# This is wr-cc conf template file
#
# Usage:
#   export WIND_CC_SYSROOT=<VSB_DIR> 
# 	wr-cc ...
#

Ignore  = -dkm -rtp -lkm -fuse-ld
Ignore += --static-crt -nodefaultlibs -no-pie -print-multiarch -rdynamic --print-multiarch -print-search-dirs --print-search-dirs -print-target-triple 

[-shared-libgcc | -static-libgcc]    error -shared-libgcc and -static-libgcc are not supported

require WIND_HOME
require WIND_BASE
require WIND_VX7_HOST_TYPE
require WIND_CC_SYSROOT

[-rtp | (!-dkm & !-lkm)] RTP = true
[-dkm | -lkm]            KERNEL = true
[-dkm]                   DKM = true
[-lkm]                   LKM = true

RTP_DISABLE = 

[RTP & !NoFiles & RTP_DISABLE] error RTP is not supported
[RTP & KERNEL]                 error cannot specify both -rtp and -dkm/-lkm

[-shared | -Bshareable]                           OptionShared = true
[-static | -Bstatic|-non_shared]                  OptionStatic = true
[-Bdynamic | -call_shared]                        OptionDynamic = true
[-r]                                              OptionPartial = true
[OptionDynamic | OptionShared | OptionPartial]    OptionNonStatic = true

[OptionPartial]                         Partial = true
[OptionShared & !OptionPartial]         Shared = true
[OptionStatic & !OptionNonStatic]       Static = true
[--static-crt]                          Static = true
[!(Shared | Static | Partial) & RTP]    Dynamic = true
[!(Shared | Static | Partial) & KERNEL] Partial = true
[KERNEL & (Static | Shared | Dynamic)]  error kernel module only support partial link

[(-fPIC | -fpic)] PIC = true
[!PIC] NON_PIC = true

[Win64 & !BINDIR]   BINDIR = $(WIND_HOME)/compilers/llvm-11.1.0.1/WIN64/bin
[Linux64 & !BINDIR] BINDIR = $(WIND_HOME)/compilers/llvm-11.1.0.1/LINUX64/bin

LINKER_LD             = ldarm
LINKER_LLD            = ld.lld
VSB_LINKER_IS_LLD     = 
DEFAULT_KERNEL_LINKER = ldarm
[-fuse-ld_ld & -fuse-ld_lld] error cannot specify both -fuse-ld=ld and -fuse-ld=lld
[-fuse-ld_lld & !LINKER_LLD] error -fuse-ld=lld is not supported for VSBs whose primary compiler is GNU
[-fuse-ld_lld & KERNEL]      error -fuse-ld=lld is not supported for DKMs or LKMs
[!VSB_LINKER_IS_LLD]         BIN_linker = $(LINKER_LD)
[VSB_LINKER_IS_LLD]          BIN_linker = $(LINKER_LLD)
[-fuse-ld_ld & LINKER_LD]    BIN_linker = $(LINKER_LD)
[-fuse-ld_lld & LINKER_LLD]  BIN_linker = $(LINKER_LLD)

PROG_cc = $(BINDIR)/clang$(EXE)
PROG_c++ = $(BINDIR)/clang++$(EXE)
PROG_cpp = $(BINDIR)/clang-cpp$(EXE)
PROG_ld = $(BINDIR)/$(BIN_linker)$(EXE) -EL
PROG_ld_KERNEL = $(BINDIR)/ldarm$(EXE) -EL
PROG_ar = $(BINDIR)/ararm$(EXE)
PROG_size = $(BINDIR)/sizearm$(EXE)
PROG_nm = $(BINDIR)/nmarm$(EXE)
PROG_objcopy = $(BINDIR)/objcopyarm$(EXE)
PROG_ranlib = $(BINDIR)/ranlibarm$(EXE)
PROG_readelf = $(BINDIR)/readelfarm$(EXE)
PROG_strip = $(BINDIR)/striparm$(EXE)
PROG_objdump = $(BINDIR)/objdumparm$(EXE)
[RTP] PROG_as = $(BINDIR)/asarm$(EXE) 
[KERNEL] PROG_as = $(BINDIR)/asarm$(EXE) 

CC = $(PROG_cc)
[C++]  CC = $(PROG_c++)
[CPP]  CC = $(PROG_cpp)
LD = $(PROG_ld)

[Verbose]           OPT_CC_V = -v
[Verbose & NoFiles] OPT_CC_V += -Wno-unused-command-line-argument

[-print-target-triple | -dumpmachine] print armv7-wrs-vxworks-eabihf
[-print-search-dirs | --print-search-dirs] print programs: = $(WIND_BASE)/host/$(WIND_VX7_HOST_TYPE)/bin
[RTP & (-print-search-dirs | --print-search-dirs)] print libraries: = $(WIND_CC_SYSROOT)/usr/lib/common$(:)$(WIND_CC_SYSROOT)/usr/3pp/develop/lib$(:)$(WIND_CC_SYSROOT)/usr/3pp/develop/usr/lib
[KERNEL & (-print-search-dirs | --print-search-dirs)] print libraries: = $(WIND_CC_SYSROOT)/krnl/llvm$(:)$(WIND_CC_SYSROOT)/krnl/ARMARCH7/common

OPT_X_C = -x c
[C++ & !OPT_X_C] STDC = -std=c++14
[NON_PIC] MC_MODEL_RTP = 
[PIC] MC_MODEL_RTP = 
MC_MODEL_KERNEL = 

[RTP] Compile = $(CC) --target=armv7-eabihf -mcpu=cortex-a15  -mfpu=vfpv4 -mfloat-abi=hard -D_VX_CPU=_VX_ARMARCH7 $(MC_MODEL_RTP) -fno-strict-aliasing -fno-builtin $(STDC) -nostdlibinc -nostdinc++ -D__ELF__   -Wno-unused-command-line-argument -D__vxworks -D__VXWORKS__  -D__RTP__  -D_VX_TOOL_FAMILY=llvm -D_VX_TOOL=llvm -D_USE_INIT_ARRAY -fasm -D_VSB_CONFIG_FILE=\"$(WIND_CC_SYSROOT)/h/config/vsbConfig.h\"  -D_VSB_PUBLIC_HDR_DIR=$(WIND_CC_SYSROOT)/usr/h/public $(OPT_CC_V) $* -I. -I$(WIND_CC_SYSROOT)/usr/h/published/UTILS_UNIX -I$(WIND_CC_SYSROOT)/share/h -isystem$(WIND_CC_SYSROOT)/usr/h/public  -I$(WIND_CC_SYSROOT)/usr/3pp/develop/usr/include
[KERNEL] Compile = $(CC) --target=armv7-eabihf -mcpu=cortex-a15  -mfpu=vfpv4 -mfloat-abi=hard -mno-implicit-float -DCPU=_VX_ARMARCH7 $(MC_MODEL_KERNEL) -fno-strict-aliasing -ftls-model=local-exec -fno-builtin $(STDC) -nostdlibinc -nostdinc++ -fcommon -D__ELF__   -Wno-unused-command-line-argument -D__vxworks -D__VXWORKS__   -D_WRS_KERNEL -DTOOL_FAMILY=llvm -DTOOL=llvm -D_USE_INIT_ARRAY -D_VSB_CONFIG_FILE=\"$(WIND_CC_SYSROOT)/h/config/vsbConfig.h\" -D_VSB_PUBLIC_HDR_DIR=$(WIND_CC_SYSROOT)/krnl/h/public $(OPT_CC_V) $* -I. -I$(WIND_CC_SYSROOT)/krnl/h/published/UTILS_UNIX -I$(WIND_CC_SYSROOT)/share/h -isystem$(WIND_CC_SYSROOT)/krnl/h/public

[C++] LibCplusPlus = -lcplusplus
[C++] LibToolCplus = -lllvmcplus
[DKM & !C++] DkmCtdt = $(WIND_CC_SYSROOT)/krnl/llvm/ctdtc.o
[DKM & C++]  DkmCtdt  = $(WIND_CC_SYSROOT)/krnl/llvm/ctdtcplus.o

[Dynamic] LibDl = -ldl

[Shared | Dynamic]  LD_MODE = --as-needed
[-rdynamic]         LD_MODE += -export-dynamic
[KERNEL & Partial & !-r]         LD_MODE = -r

[Verbose] OPT_LD_V = -v

[--static-crt] OPT_STATIC_CRT = -Bstatic

[(VSB_LINKER_IS_LLD & !-fuse-ld_ld) | -fuse-ld_lld] LD_TOOL_FLAGS_RTP_lld = -z norelro --no-rosegment
[Static] LD_ARGS_RTP = 
[Dynamic] LD_ARGS_RTP = --target2=got-rel
[Static | Dynamic] Link = $(LD) $(LD_ARGS_RTP) $(LD_MODE) --defsym __wrs_rtp_base=0x80000000 -u __wr_need_frame_add -u __tls__ $(LD_TOOL_FLAGS_RTP_lld) -T$(WIND_CC_SYSROOT)/usr/ldscripts/rtp.ld $(WIND_CC_SYSROOT)/usr/lib/common/crt0.o $* -L$(WIND_CC_SYSROOT)/usr/lib/common/ -L$(WIND_CC_SYSROOT)/usr/3pp/develop/lib -L$(WIND_CC_SYSROOT)/usr/3pp/develop/usr/lib $(OPT_STATIC_CRT) --start-group -lc -lc_internal -lllvm -lnet -lunix -lregex $(LibDl) $(LibCplusPlus) $(LibToolCplus) --end-group

[(VSB_LINKER_IS_LLD & !-fuse-ld_ld) | -fuse-ld_lld] LD_TOOL_FLAGS_SHL_lld = -z norelro --no-rosegment
[Shared] Link = $(LD)  --target2=got-rel $(LD_MODE) $* --exclude-libs libc_internal_s.a -u __init -u __fini -u __wr_need_frame_add $(LD_TOOL_FLAGS_SHL_lld) -L$(WIND_CC_SYSROOT)/usr/lib/common -L$(WIND_CC_SYSROOT)/usr/3pp/develop/lib -L$(WIND_CC_SYSROOT)/usr/3pp/develop/usr/lib -lc -lc_internal_s  -lllvm -lnet -lunix -lregex $(LibCplusPlus) $(LibToolCplus) -T$(WIND_CC_SYSROOT)/usr/ldscripts/shlib.ld

[Partial & RTP] Link = $(LD) $(LD_MODE) $*
[Partial & DKM] Link = $(PROG_ld_KERNEL) -X $(LD_MODE) --eh-frame-hdr --force-group-allocation  -T$(WIND_CC_SYSROOT)/krnl/ldscripts/dkm.ld $(DkmCtdt) $*
[Partial & LKM] Link = $(PROG_ld_KERNEL) -X $(LD_MODE) --eh-frame-hdr $*
